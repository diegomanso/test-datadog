trigger:
  branches:
    include:
    - main

variables:
  - group: 'Dashboard-POC'

pool:
  vmImage: 'Ubuntu-20.04'

stages:
  - stage: AKSDash
    displayName: "AKS Dashboard Deployment"
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
    - job: Terraform_deployment
      steps:
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          inputs:
            terraformVersion: '1.1.5'

        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in **/*.tfvars'
          inputs:
            rootDirectory: './terraform'
            targetFiles: '**/*.tfvars'
       
        - task: TerraformTaskV2@2
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: './terraform'
            backendServiceArm: '$(service_connection)'
            backendAzureRmResourceGroupName: '$(terraform_state_file_resource_group)'
            backendAzureRmStorageAccountName: '$(terraform_state_file_storage)'
            backendAzureRmContainerName: '$(terraform_state_file_container)'
            backendAzureRmKey: '$(terraform_state_file_name)'
          displayName: 'Terraform - azurerm init'
        
        - task: TerraformTaskV2@2
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: './terraform'
            commandOptions: '-var-file=./terraform.tfvars -input=false -auto-approve -no-color '
            environmentServiceNameAzureRM: '$(service_connection)'
          displayName: 'Terraform - azurerm apply'

